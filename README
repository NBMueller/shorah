Full online documentation at:
https://wiki-bsse.ethz.ch/display/ShoRAH/Documentation

ShoRAH consists of several programs:

dec.py       - local error correction based on diri_sampler
diri_sampler - Gibbs sampling for Dirichlet process mixture
contain      - eliminate redundant reads
mm.py        - maximum matching haplotype construction
freqEst      - EM algorithm for haplotype frequency
fas2read.pl  - translates between two formats for read data files

Copyright 2007-2012
Niko Beerenwinkel,
Arnab Bhattacharya,
Nicholas Eriksson,
Moritz Gerstung,
Lukas Geyrhofer,
Kerensa McElroy,
Osvaldo Zagordi,
ETH Zurich
under GPL. See file LICENSE for details.
The program also includes other software written by third parties.
This has been distributed according to the licenses provided by the
respective authors.


GENERAL USAGE:
--------------------------------------------------

Install:
	type 'make' to build the C++ programs, then run. See INSTALL
	for additional information.

Run:
	The whole process can be run one step after the other, or one can
	invoke shorah.py, that runs the whole process from bam file to
	frequency estimation and SNV calling. The local analysis alone
    can be run invoking	dec.py or directly diri_sampler.
    The input must be an alignment of the reads in bam format.


DEC.PY:
--------------------------------------------------
Usage: dec.py [options]

Options:
  -h, --help            show this help message and exit
  -b B, --bam=B         file with aligned reads in .bam format
  -f F, --fasta=F       reference genome in fasta format
  -w W, --windowsize=W  window size <201>
  -s S, --winshifts=S   number of window shifts <3>
  -r R, --region=R      region in format 'chrom:start-stop',
                        eg 'ch3:1000-3000'
  -x X, --maxcov=X      approximate max coverage allowed <10000>
  -a A, --alpha=A       alpha in dpm sampling <0.1>
  -k, --keep_files      keep all intermediate files <False>


Other options
-------------
These parameters are controlled by the global variables declared at the
beginning of file dec.py. See the relative comments for an explanation.
IMPORTANT: Since version 0.3 dec.py launches jobs in parallel on
multi-processor computers. By default it uses all available CPUs but one.

Tips:
	Rerunning on selected windows:
	When running with option -k, dec.py produces and retains several
	files in the subdirectory "corrected/" of the form
	w1-99.reads-cor.fas.gz, where 1 and 99 are, respectively, the
	beginning and the end of the window under consideration. If the
	user wishes to rerun dec.py on selected windows only, one should
	simply delete the corresponding file in the directory "corrected/"
	NOTE: The error correction implemented in diri_sampler will not run
    for any window whose corresponding file is present in the directory
	"corrected/".
	
	Changing parameters on the fly:
	If the user wishes to change the number of iterations of
	diri_sampler (because the burn-in phase is shorter or longer
	than expected) one can write a file w1-99.iter (again 1 and 99
	are the boundaries of the window) with a single line that
	contains the desired number of iterations. Similarly, one can
	change alpha by writing into a file w1-99.alpha a float with the
	new value of alpha. While alpha can be increased and decreased by
	editing the .alpha file without adversely affecting the
	functioning of the program (but obviously its result), we
	recommend changing the number of iterations at most once.

	Maximum weight of read objects:
	The new implementation of diri_sampler clubs identical reads into
	objects defined by the read sequence and the number of reads in
	the object. This allows for faster computation, but might
	introduce a bias into the sampling procedure. One can limit the
	maximum number of identical reads in a single object by	editing
	the variable LIMIT in dpm_src/dpm_sampler.h (default is 10000)
	
Output:
	The program dec.py outputs several files. The file sample_cor.fas,
    which contains the corrected reads, is passed by shorah (or by the
    user) to the following step of the global analysis, fas2read.pl.
    dec.py also outputs a file called proposed.dat. It contains the
	number of proposed new clusters in each window. One should always
    make sure that a sufficient number of new cluster has been proposed
    (rule of thumb, at least 0.1 per step or more). When the program is
    run with the -k option, several directories are created. They
	contain zipped files that report information on the error
	correction procedure. For a full explanation, see
	http://wiki-bsse.ethz.ch/display/ShoRAH/Local+analysis



SHORAH.PY:
--------------------------------------------------

Usage: shorah.py [options]

Options:
  -h, --help            show this help message and exit
  -b B, --bam=B         sorted bam format alignment file
  -f F, --fasta=F       reference genome in fasta format
  -a A, --alpha=A       alpha in dpm sampling <0.1>
  -w W, --windowsize=W  window size <201>
  -s S, --winshifts=S   number of window shifts <3>
  -i I, --sigma=I       value of sigma to use when calling
                        SNVs <0.01>
  -x X, --maxcov=X      approximate max coverage allowed <10000>
  -r R, --region=R      region in format 'chr:start-stop',
                        eg 'ch3:1000-3000'
  -k, --keep_files      keep intermediate files <False>

	
Output:
	The final result of the analysis is in the file
	sample_454_cor.popl, the first lines of which are reported.
	>HAP0_0.708656
	TC-AA--A--TCACTCTTTGGCAACGACCCCTTGTC-AC.........[line truncated]
	>HAP1_0.194
	TC-TG--A--TCACTCTTTGGCAGCGACCCCTCGTC-AC.........[line truncated]

	This file contains the sequences of the reconstructed haplotypes
	(reconstructed by the program mm.py) and their frequencies
	(estimated by the program freqEst. The name of each sentence is in
	the format HAPn_freq where n is an ordinal number and freq is the
	frequency. Haplotypes are sorted in descending order according to
	their frequencies.
    
    Since version 0.6, shorah also returns a list of SNV (single nucleotide
    variants). The output is a csv file in the directory snv/.
